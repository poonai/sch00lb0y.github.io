<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 5ch00lb0y</title>
    <link>https://sch00lb0y.github.io/post/</link>
    <description>Recent content in Posts on 5ch00lb0y</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Sep 2018 12:35:46 +0530</lastBuildDate>
    
	<atom:link href="https://sch00lb0y.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple worker in rust</title>
      <link>https://sch00lb0y.github.io/post/simple_worker_in_rust/</link>
      <pubDate>Mon, 17 Sep 2018 12:35:46 +0530</pubDate>
      
      <guid>https://sch00lb0y.github.io/post/simple_worker_in_rust/</guid>
      <description>Creating a worker is too important when you want to execute a concurrent job. Why queue a task instead of spawning thread for each job? 
If your job is a short-lived process, You&amp;rsquo;ll end up in spending more time on creating and exiting the thread. So it is better to queue the task and execute the job sequentially in a sperate thread.
extern crate chan_signal; use chan_signal::Signal; use std::sync::mpsc; use std::sync::mpsc::{Receiver, Sender}; use std::thread; enum ReceiveMessage { Work(Box&amp;lt;Fn() + Send&amp;gt;), End, } struct Worker { sender: Sender&amp;lt;ReceiveMessage&amp;gt;, } impl Worker { fn start() -&amp;gt; Self { let (sender, reciver): (Sender&amp;lt;ReceiveMessage&amp;gt;, Receiver&amp;lt;ReceiveMessage&amp;gt;) = mpsc::channel(); thread::spawn(move || loop { if let Ok(task) = reciver.</description>
    </item>
    
  </channel>
</rss>